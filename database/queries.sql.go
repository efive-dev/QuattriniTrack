// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM categories
WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE
FROM transactions
WHERE id = ?
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, name, cost, date, categories_id FROM transactions
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Date,
			&i.CategoriesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name
FROM categories
WHERE id = ?
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, name, cost, date, categories_id
FROM transactions
WHERE id = ?
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Date,
		&i.CategoriesID,
	)
	return i, err
}

const getTransactionByName = `-- name: GetTransactionByName :many
SELECT id, name, cost, date, categories_id
FROM transactions
WHERE name = ?
`

func (q *Queries) GetTransactionByName(ctx context.Context, name string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Date,
			&i.CategoriesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO categories(name)
VALUES (?)
`

func (q *Queries) InsertCategory(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertCategory, name)
	return err
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transactions(name, cost, date, categories_id)
VALUES (?, ?, ?, ?)
`

type InsertTransactionParams struct {
	Name         string
	Cost         float64
	Date         time.Time
	CategoriesID int64
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.ExecContext(ctx, insertTransaction,
		arg.Name,
		arg.Cost,
		arg.Date,
		arg.CategoriesID,
	)
	return err
}
